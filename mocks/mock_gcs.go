// Code generated by MockGen. DO NOT EDIT.
// Source: UtsuruConcept/storage (interfaces: UtsuruFileStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUtsuruFileStorage is a mock of UtsuruFileStorage interface
type MockUtsuruFileStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUtsuruFileStorageMockRecorder
}

// MockUtsuruFileStorageMockRecorder is the mock recorder for MockUtsuruFileStorage
type MockUtsuruFileStorageMockRecorder struct {
	mock *MockUtsuruFileStorage
}

// NewMockUtsuruFileStorage creates a new mock instance
func NewMockUtsuruFileStorage(ctrl *gomock.Controller) *MockUtsuruFileStorage {
	mock := &MockUtsuruFileStorage{ctrl: ctrl}
	mock.recorder = &MockUtsuruFileStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUtsuruFileStorage) EXPECT() *MockUtsuruFileStorageMockRecorder {
	return m.recorder
}

// CreateUserFolder mocks base method
func (m *MockUtsuruFileStorage) CreateUserFolder(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserFolder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserFolder indicates an expected call of CreateUserFolder
func (mr *MockUtsuruFileStorageMockRecorder) CreateUserFolder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserFolder", reflect.TypeOf((*MockUtsuruFileStorage)(nil).CreateUserFolder), arg0)
}

// GenerateImageURL mocks base method
func (m *MockUtsuruFileStorage) GenerateImageURL(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateImageURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateImageURL indicates an expected call of GenerateImageURL
func (mr *MockUtsuruFileStorageMockRecorder) GenerateImageURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateImageURL", reflect.TypeOf((*MockUtsuruFileStorage)(nil).GenerateImageURL), arg0, arg1)
}

// IsUserFolderExists mocks base method
func (m *MockUtsuruFileStorage) IsUserFolderExists(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserFolderExists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUserFolderExists indicates an expected call of IsUserFolderExists
func (mr *MockUtsuruFileStorageMockRecorder) IsUserFolderExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserFolderExists", reflect.TypeOf((*MockUtsuruFileStorage)(nil).IsUserFolderExists), arg0)
}

// UploadToProvider mocks base method
func (m *MockUtsuruFileStorage) UploadToProvider(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadToProvider", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadToProvider indicates an expected call of UploadToProvider
func (mr *MockUtsuruFileStorageMockRecorder) UploadToProvider(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadToProvider", reflect.TypeOf((*MockUtsuruFileStorage)(nil).UploadToProvider), arg0, arg1)
}
